library(PerformanceAnalytics)
library(DEoptim)
library(quantmod)



etflist = c("TLT","SPY","XLB","XLV","XLP","XLY","XLE","XLF","XLI","XLK","XLU")
getSymbols("SPY",from="2003-12-01", to = "2013-05-01")




getSymbols(etflist,from="2003-12-01", to = "2013-05-01")
benchlist = "SPY"
tickers = etflist 
## Make matrix of Returns code stolen from vignette of deoptim
P<- NULL
seltickers<-NULL
for(ticker in tickers){
  tmp = Ad(to.monthly(eval(parse(text=ticker))))
  if(is.null(P)){timeP=time(tmp)}
  if(any(time(tmp)!=timeP)) next
  else P = cbind(P,as.numeric(tmp))
  seltickers = c(seltickers,ticker)
}
P = xts(P,order.by=timeP)
colnames(P) = seltickers
R = diff(log(P))
R = R[-1,]

## Make Matrix of daily returns
Pday<- NULL
seltickers<-NULL
for(ticker in tickers){
  tmp = Ad(to.daily(eval(parse(text=ticker))))
  if(is.null(Pday)){timeP=time(tmp)}
  if(any(time(tmp)!=timeP)) next
  else Pday = cbind(Pday,as.numeric(tmp))
  seltickers = c(seltickers,ticker)
}
Pday = xts(Pday,order.by=timeP)
colnames(Pday) = seltickers
Rday = diff(log(Pday))
Rday = Rday[-1,]

#Benchmarks
P2<- NULL
seltickers<-NULL
for(ticker in benchlist){
  tmp = Ad(to.monthly(eval(parse(text=ticker))))
  if(is.null(P2)){timeP=time(tmp)}
  if(any(time(tmp)!=timeP)) next
  else P2 = cbind(P2,as.numeric(tmp))
  seltickers = c(seltickers,ticker)
}
P2 = xts(P2,order.by=timeP)
colnames(P2) = seltickers
R2 = diff(log(P2))
R2 = R2[-1,]


initw = rep(1/ncol(R),ncol(R))
objectivefun = function(w){
  if(sum(w)==0){
		w = w + 1e-2 
	}
	w = w / sum(w)
targ = ES(weights=w,method="gaussian",portfolio_method="component",mu=mu,sigma=sigma)
tmp1 = targ$ES
tmp2 = max(targ$pct_contrib_ES-0.05,0)
out = tmp1 + 1e3 * tmp2
return(out)}

source("C:/R-Package/returnanalytics/pkg/PortfolioAnalytics/R/random_portfolios.R")
source("C:/R-Package/returnanalytics/pkg/PortfolioAnalytics/R/constraints.R")


N = ncol(R)
minw = 0
maxw = 1
lower = rep(minw,N)
upper = rep(maxw,N)

eps <- 0.025
weight_seq<-generatesequence(min=minw,max=maxw,by=.001,rounding=3)
rpconstraint<-constraint( assets=N, min_sum=1-eps, max_sum=1+eps, min=lower, max=upper, weight_seq=weight_seq)

rp = random_portfolios(rpconstraints=rpconstraint,permutations=N*10)
rp <-rp/rowSums(rp)
controlDE = list(reltol=0.00001,steptol=150,itermax=2000,trace=250,NP=as.numeric(nrow(rp)),initialpop=rp,strategy=6,c=0)
set.seed(1234)

preturn = R
for (p in 1:ncol(preturn)){
	
preturn[,p] = 0
}
optweights = R
for (z in 1:ncol(optweights)){
	
optweights[,z] = 0
}

for (i in 2:length(R)){
rollR = first(R,i)
mu = colMeans(rollR)
sigma = cov(rollR)

weightvec = DEoptim(fn=objectivefun,lower=lower,upper=upper,control=controlDE)
preturn[i+1,] = weightvec$optim$bestmem*R[i+1]
optweights[i+1,] = weightvec$optim$bestmem

}
optweights2 = optweights/rowSums(optweights)
portreturn_cov = optweights2*R
portreturn_cov = rowSums(portreturn_cov)
portreturn_cov = xts(portreturn_cov,order.by=index(R))

colnames(portreturn_cov) = "MinCVaR_cov"
OOSweights_cov = weightvec$optim$bestmem/sum(weightvec$optim$bestmem)

twoassets = merge.xts(portreturn_cov,R2)

#### SVDCOV
svdcov = function(x){
	
 	svdmat = svd(x)
	
	### http://randomanalyses.blogspot.ca/2011/12/svd-and-covariance-matrices.html
	
## d is the singular values s in matlab code
## u is left singular
## v is right singular
dvec = matrix(data=NA,nrow=11,ncol=1)
dvec[,1] = svdmat$d
covmat = svdmat$v%*%(dvec%*%t(dvec))%*%svdmat$v
	
	colnames(covmat) = colnames(x)
	rownames(covmat) = colnames(x)
	return(covmat)
	
}

### SVD Covariance Matrix
for (i in 2:length(R)){
rollR = first(R,i)
rend = endpoints(Rday)
rollRday = first(Rday,rend[i]+2)

mu = colMeans(rollR)
#sigma = svdcov(rollRday)
sigma = cov(rollRday)

weightvec = DEoptim(fn=objectivefun,lower=lower,upper=upper,control=controlDE)
preturn[i+1,] = weightvec$optim$bestmem*R[i+1]
optweights[i+1,] = weightvec$optim$bestmem

}

optweights2 = optweights/rowSums(optweights)
portreturn_svd = optweights2*R
portreturn_svd = rowSums(portreturn_svd)
portreturn_svd = xts(portreturn_svd,order.by=index(R))

colnames(portreturn_svd) = "MinCVaR_svd"
